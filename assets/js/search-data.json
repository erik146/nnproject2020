{
  
    
        "post0": {
            "title": "Predicting penalty outcome in football.",
            "content": "Predicting penalty outcome in football based on early signs, before the ball reaches the goal line. . Main idea . In football, there are lots of predictions made at all times. Starting from friends amongst fans arguing and ending with big worldwide betting companies. Most often it is considered if a match is won by one or another team, but also some statistical results are considered. . In this project a smaller event, namely penalty kick is considered. Despite of being a short event itself it causes lot of exitement and waiting for the result. All kinds of signs are noted during the penalty kick, starting from the facts of who is the goalkeeper and who is actually taking the penalty shot. The next signs are, which foot the kicker uses and which directions the ball moves to. At that moment the audience can also see which side the goalkeeper decides to jump. And these signs are the key concept used in this project that aims to predict whether the ball ends up in the net or not based on the information above. . The dataset . For training the network, a dataset from Kaggle is used, that contains all of the fields listed above for every penalty taken during English Premier League in 2016/17 season. The dataset also contains several fields that are not important for the binary prediction that is made in this project. For example the end result of the match does not give any input to the penalty at the time it was taken. Also it should not be that important what team was playing, but the player and goalkeeper themselves. . We chose that suggested dataset, because, although being not too big, it already contains the necessary data. It was also noted, that this kind of dataset is easily constructable for whatever match, because penalties are often higlighted in short highlights video and therefore the necessary information can be rather quickly collected and added to the network. . Looking at options available, following data fields were chosen to be used in the first iteration of this project: . Match Week It may affect the result. At the beginning of the season there is lot less pressure and concentration level and physique of the player might not be at its best yet. | . | Player(Kicker) Before the penalty kick we also know the history of the player. For this reason stats are collected from tranfermarket.com and added to the dataset. Also it would be beneficial to add where the player most usually hits, but this information is still not available. | . | Time of penalty awarded Fatigue affects the result | . | Kick Direction Left/right/center – In which way was the ball going? | . | Goal keeper direction Which way did the goalkeeper jump. Here it would be beneficial to also find out, if the goalkeeper jumped to the right direction. | . | Match From this we can find out who was the goalkeeper and add the data from the past results. | . | . Analysing the data . The dataset was analyzed also in the Kaggle page where it was taken from. It was shown there, that there are lots of correlations among the dataset, which suggests that neural networks should be capable of learning even bigger relations with enough data, between the parameters and the outcome of the penalty. . Difficulties . Though there are some difficulties, when feeding this kind of data to a neural network, as it has to be considered, that the goalkeeper and player are not well representable in numerical value, that would be straight usable in numeric analysis. So, it has to be considered when designing a network, that the network should be capable of categorizing the actors in those kicks somehow, so that the information is possible to combine with other parameters and therefore combined with other inputs. . For this reason the kicker and goalkeeper should be presented with relevant statistical data. This data could be looked up separately from databases or even calculated priorly using the information from the same dataset that is used for this network (the average jumping direction or percent of saved penalties). . Testing . Tests with small dataset and without player information . The first tests were made with simplest network, only taking the ball direction and goalkeeper direction as input and using simple fully connected neural network to predict the result. . Tests with full dataset using different network structure . When it was seen how all parameters effect the outcome of the simple network, there were several structural changes made to the network, including changing the learning rate, layer count and sizes and also adding different layer types and activation function were tested. . After the data had been converted to numerical format and all unneccesary and unusable fields were removed, we created a simple network with fully connected layers to see how the data behaves. The inputs to that network ended up being the match week of the tournament, the kick direction, if the kick was made with left or right foot, the direction that the goalkeeper first jumped, on which time in the match was the penalty given and the accuracy of the player who takes the penalty shot. The network consisted of 5 hidden layers to give the network the ability to learn deeper relations within the data. There were no convolutional layers used, because the structure of the data would not make use of applying same filter over different locations as there is different types of information in the input. Also any features the network extracts should be of different type. When choosing the sizes for the network, it had to be kept in mind, that the dataset was quite small and making very large layers would make it even easier to overfit our data. So the layer sizes were chosen to be 10, 50, 50, 20 and 10, which gives it more freedom in the middle section and approaches conclusions towards the end. As the optimizer, ADAM was chosen and simple ReLu activation was used in each hidden layer. As expected for relatively small dataset, the results showed signs of overfitting with the training accuracy being significantly higher than the validation accuracy. But still the network achieved 60%-80% test accuracy, which is better than 50%, which would be average result for binary problem without any training. . Testing with different data . As the original network was trained on English Premiere League data, it was interesting to see, if we could gather some data from different leagues and if the network would produce similar results for those test cases. . For this we collected same kind of information for 20 penalty kicks from different matches using online databases and added data that was missing from videos. (The actual process was the other way around as the video was looked for first, because it is harder to find videos than necessary player data from databases). . Also we built simple random forest model and simple decision tree model, and these results were usually lower and results were not as stabel as with NN. But one thing to think about is that the computation was much faster with ML algorithms. . ###Future work . This project has shown that predicting goal from ball direction, player/goal keeper shooting/defending history and time of the game is not sufficient (with that amount of data). As stated before, penalty-kick outcome is not dependent of kicking direction or previous statistics. As stated in researches, it is mainly the game of nerves. To get better prediction and view into these kind of variables, we have to learn from video feed. From there we can calculate ball speed, launch angle, kicker distance from ball, etc. . But the problem is collecting the data. Sport prediction is big business, where freely available data is limited. For getting sightful data from the same angle video clip requieres alot of searching. . Conclusions . Instatsport have done a massive research of penalties, where they researched almost 100 000 penalty shots around the globe - females and males. They concluded, that both female and males have around ~75% chance of succeeding. Therefor if you are always predicting, that the outcome of the kick is positive - then your accuracy is 75%. . Our Data was aquired from different datasets, which we manipulated to get better result. Few of the inputs we normalized and others we one-hot encoded(1 and 0 values). With ANN we got values between 60-80% and with simple ML algorithms ~10% lower accuracy on test data. But since ~75 precent penalties are successfull, then just predicting that the penalty is successfull everytime is as good as our predictions. .",
            "url": "https://erik146.github.io/nnproject2020/markdown/2020/06/14/main-post.html",
            "relUrl": "/markdown/2020/06/14/main-post.html",
            "date": " • Jun 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://erik146.github.io/nnproject2020/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://erik146.github.io/nnproject2020/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Predicting penalty outcome in football.",
            "content": "Predicting penalty outcome in football based on early signs, before the ball reaches the goal line. . Tere . Main idea . In football, there are lots of predictions made at all times. Starting from friends amongst fans arguing and ending with big worldwide betting companies. Most often it is considered if a match is won by one or another team, but also some statistical results are considered. . In this project a smaller event, namely penalty kick is considered. Despite of being a short event itself it causes lot of exitement and waiting for the result. All kinds of signs are noted during the penalty kick, starting from the facts of who is the goalkeeper and who is actually taking the penalty shot. The next signs are, which foot the kicker uses and which directions the ball moves to. At that moment the audience can also see which side the goalkeeper decides to jump. And these signs are the key concept used in this project that aims to predict whether the ball ends up in the net or not based on the information above. . The dataset . For training the network, a dataset from Kaggle is used, that contains all of the fields listed above for every penalty taken during English Premier League in 2016/17 season. The dataset also contains several fields that are not important for the binary prediction that is made in this project. For example the end result of the match does not give any input to the penalty at the time it was taken. Also it should not be that important what team was playing, but the player and goalkeeper themselves. . We chose that suggested dataset, because, although being not too big, it already contains the necessary data. It was also noted, that this kind of dataset is easily constructable for whatever match, because penalties are often higlighted in short highlights video and therefore the necessary information can be rather quickly collected and added to the network. . Looking at options available, following data fields were chosen to be used in the first iteration of this project: . Match Week It may affect the result. At the beginning of the season there is lot less pressure and concentration level and physique of the player might not be at its best yet. | . | Player(Kicker) Before the penalty kick we also know the history of the player. For this reason stats are collected from tranfermarket.com and added to the dataset. Also it would be beneficial to add where the player most usually hits, but this information is still not available. | . | Time of penalty awarded Fatigue affects the result | . | Kick Direction Left/right/center – In which way was the ball going? | . | Goal keeper direction Which way did the goalkeeper jump. Here it would be beneficial to also find out, if the goalkeeper jumped to the right direction. | . | Match From this we can find out who was the goalkeeper and add the data from the past results. | . | . Analysing the data . The dataset was analyzed also in the Kaggle page where it was taken from. It was shown there, that there are lots of correlations among the dataset, which suggests that neural networks should be capable of learning even bigger relations with enough data, between the parameters and the outcome of the penalty. . Difficulties . Though there are some difficulties, when feeding this kind of data to a neural network, as it has to be considered, that the goalkeeper and player are not well representable in numerical value, that would be straight usable in numeric analysis. So, it has to be considered when designing a network, that the network should be capable of categorizing the actors in those kicks somehow, so that the information is possible to combine with other parameters and therefore combined with other inputs. . For this reason the kicker and goalkeeper should be presented with relevant statistical data. This data could be looked up separately from databases or even calculated priorly using the information from the same dataset that is used for this network (the average jumping direction or percent of saved penalties). . Testing . Tests with small dataset and without player information . The first tests were made with simplest network, only taking the ball direction and goalkeeper direction as input and using simple fully connected neural network to predict the result. After that different components were added to the network one-by-one to see how they effect the result. . Tests with full dataset using different network structure . When it was seen how all parameters effect the outcome of the simple network, there were several structural changes made to the network, including changing the learning rate, layer count and sizes and also adding different layer types and activation function were tested. . As the end result it was possible to see, that… . Testing with different data . As the original network was trained on English Premiere League data, it was interesting to see, if we could gather some data from different leagues and if the network would produce similar results for those test cases. . For this we collected same kind of information for 20 penalty kicks from different matches using online databases and added data that was missing from videos. (The actual process was the other way around as the video was looked for first, because it is harder to find videos than necessary player data from databases). . Conclusions . Here we plan to draw conclusions when all of the tests are executed and data is analyzed. .",
            "url": "https://erik146.github.io/nnproject2020/markdown/2020/01/14/main-post.html",
            "relUrl": "/markdown/2020/01/14/main-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Predicting penalty outcome in football.",
            "content": "Predicting penalty outcome in football based on early signs, before the ball reaches the goal line. . Main idea . Test Test kas sa töötad? . . In football, there are lots of predictions made at all times. Starting from friends amongst fans arguing and ending with big worldwide betting companies. Most often it is considered if a match is won by one or another team, but also some statistical results are considered. . In this project a smaller event, namely penalty kick is considered. Despite of being a short event itself it causes lot of exitement and waiting for the result. All kinds of signs are noted during the penalty kick, starting from the facts of who is the goalkeeper and who is actually taking the penalty shot. The next signs are, which foot the kicker uses and which directions the ball moves to. At that moment the audience can also see which side the goalkeeper decides to jump. And these signs are the key concept used in this project that aims to predict whether the ball ends up in the net or not based on the information above. . The dataset . For training the network, a dataset from Kaggle is used, that contains all of the fields listed above for every penalty taken during English Premier League in 2016/17 season. The dataset also contains several fields that are not important for the binary prediction that is made in this project. For example the end result of the match does not give any input to the penalty at the time it was taken. Also it should not be that important what team was playing, but the player and goalkeeper themselves. . We chose that suggested dataset, because, although being not too big, it already contains the necessary data. It was also noted, that this kind of dataset is easily constructable for whatever match, because penalties are often higlighted in short highlights video and therefore the necessary information can be rather quickly collected and added to the network. . Looking at options available, following data fields were chosen to be used in the first iteration of this project: . Match Week It may affect the result. At the beginning of the season there is lot less pressure and concentration level and physique of the player might not be at its best yet. | . | Player(Kicker) Before the penalty kick we also know the history of the player. For this reason stats are collected from tranfermarket.com and added to the dataset. Also it would be beneficial to add where the player most usually hits, but this information is still not available. | . | Time of penalty awarded Fatigue affects the result | . | Kick Direction Left/right/center – In which way was the ball going? | . | Goal keeper direction Which way did the goalkeeper jump. Here it would be beneficial to also find out, if the goalkeeper jumped to the right direction. | . | Match From this we can find out who was the goalkeeper and add the data from the past results. | . | . Analysing the data . The dataset was analyzed also in the Kaggle page where it was taken from. It was shown there, that there are lots of correlations among the dataset, which suggests that neural networks should be capable of learning even bigger relations with enough data, between the parameters and the outcome of the penalty. . Difficulties . Though there are some difficulties, when feeding this kind of data to a neural network, as it has to be considered, that the goalkeeper and player are not well representable in numerical value, that would be straight usable in numeric analysis. So, it has to be considered when designing a network, that the network should be capable of categorizing the actors in those kicks somehow, so that the information is possible to combine with other parameters and therefore combined with other inputs. . For this reason the kicker and goalkeeper should be presented with relevant statistical data. This data could be looked up separately from databases or even calculated priorly using the information from the same dataset that is used for this network (the average jumping direction or percent of saved penalties). . Testing . Tests with small dataset and without player information . The first tests were made with simplest network, only taking the ball direction and goalkeeper direction as input and using simple fully connected neural network to predict the result. After that different components were added to the network one-by-one to see how they effect the result. . Tests with full dataset using different network structure . When it was seen how all parameters effect the outcome of the simple network, there were several structural changes made to the network, including changing the learning rate, layer count and sizes and also adding different layer types and activation function were tested. . As the end result it was possible to see, that… . Testing with different data . As the original network was trained on English Premiere League data, it was interesting to see, if we could gather some data from different leagues and if the network would produce similar results for those test cases. . For this we collected same kind of information for 20 penalty kicks from different matches using online databases and added data that was missing from videos. (The actual process was the other way around as the video was looked for first, because it is harder to find videos than necessary player data from databases). . Conclusions . Here we plan to draw conclusions when all of the tests are executed and data is analyzed. .",
            "url": "https://erik146.github.io/nnproject2020/markdown/2020/01/13/main-post.html",
            "relUrl": "/markdown/2020/01/13/main-post.html",
            "date": " • Jan 13, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Course project blog for UT Neural Network Course 2019/20 Spring. . ###Authors: . Erik Amor . Georg Reintam .",
          "url": "https://erik146.github.io/nnproject2020/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page8": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://erik146.github.io/nnproject2020/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}